generator db {
    provider                    = "prisma-client-py"
    recursive_type_depth        = 5
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Ciudad {
  id            Int       @id @default(autoincrement())
  nombre        String    @map("nombre") @db.VarChar(100)
  departamento  String    @map("departamento") @db.VarChar(100)
  descripcion   String    @map("descripcion") @db.VarChar(250)
  estatico      Boolean   @default(false)
  test          Boolean   @default(false)

  // Relación uno a muchos
  sucursales    Sucursal[]

  @@map("Ciudad")
}

model Puesto {
  id              Int     @id @default(autoincrement())
  nombre          String  @map("nombre") @db.VarChar(100)
  descripcion     String  @map("descripcion") @db.VarChar(250)
  salario_horario Float
  estatico        Boolean @default(false)

  // Relación uno a muchos
  usuarios        Usuario[]

  @@map("Puesto")
}

model Rol {
  id          Int     @id @default(autoincrement())
  nombre      String  @map("nombre") @db.VarChar(100)
  descripcion String  @map("descripcion") @db.VarChar(250)
  estatico    Boolean @default(false)

  // Relación uno a muchos
  usuarios    Usuario[]

  @@map("Rol")
}

model TipoSucursal {
  id        Int     @id @default(autoincrement())
  nombre    String  @map("nombre") @db.VarChar(100)
  estatico  Boolean @default(false)

  // Relación uno a muchos
  sucursales    Sucursal[]

  @@map("TipoSucursal")
}

model Sucursal {
  id                Int     @id @default(autoincrement())
  nombre            String  @map("nombre") @db.VarChar(100)
  direccion         String
  latitud           Float
  longitud          Float
  ciudad_id         Int
  tipo_sucursal_id  Int
  estatico          Boolean @default(false)
  test              Boolean   @default(false)

  // Llaves foraneas
  ciudad        Ciudad  @relation(fields: [ciudad_id], references: [id])
  tipoSucursal  TipoSucursal  @relation(fields: [tipo_sucursal_id], references: [id])

  // Relación uno a muchos
  usuarios          Usuario[]
  vehiculos         Vehiculo[]
  ingresos          Ingreso[]
  gastos            Gasto[]
  segmentos_origen  Segmento[] @relation("sucursal_origen")
  segmentos_destino Segmento[] @relation("sucursal_destino")
  trackings         Tracking[]
  trackings_log     TrackingLog[]

  @@map("Sucursal")
}

model Usuario {
  id          Int     @id @default(autoincrement())
  nombre      String  @map("nombre") @db.VarChar(100)
  username    String  @map("username") @db.VarChar(100)
  email       String  @unique
  password    String
  horas       Int
  rol_id      Int
  puesto_id   Int
  sucursal_id Int
  estatico    Boolean @default(false)
  test        Boolean   @default(false)
  
  // Llaves foraneas
  rol         Rol     @relation(fields: [rol_id], references: [id])
  puesto      Puesto @relation(fields: [puesto_id], references: [id])
  sucursal    Sucursal @relation(fields: [sucursal_id], references: [id])

  @@map("Usuario")
}

model Tarifario {
  id              Int       @id @default(autoincrement())
  fecha           DateTime
  ganancia_envio  Float
  costo_lb        Float
  test            Boolean   @default(false)
  
  @@map("Tarifario")
}

model TipoVehiculo {
  id        Int     @id @default(autoincrement())
  nombre    String  @map("nombre") @db.VarChar(100)
  estatico  Boolean @default(false)

  // Relación uno a muchos
  vehiculos Vehiculo[]

  @@map("TipoVehiculo")
}

model Vehiculo {
  id                Int     @id @default(autoincrement())
  placa             String  @map("placa") @db.VarChar(20)
  capacidad_lb      Float
  costo_km          Float
  tipo_vehiculo_id  Int
  sucursal_id       Int
  test              Boolean   @default(false)

  // Llaves foraneas
  tipoVehiculo TipoVehiculo @relation(fields: [tipo_vehiculo_id], references: [id])
  sucursal     Sucursal     @relation(fields: [sucursal_id], references: [id])

   // Relación uno a muchos
  salidas Salida[]

  @@map("Vehiculo")
}

model TipoGasto {
  id        Int     @id @default(autoincrement())
  nombre    String  @map("nombre") @db.VarChar(100)
  estatico  Boolean @default(false)

  // Relación uno a muchos
  gastos Gasto[]

  @@map("TipoGasto")
}

model ConceptoGasto {
  id        Int     @id @default(autoincrement())
  nombre    String  @map("nombre") @db.VarChar(100)
  estatico  Boolean @default(false)

  // Relación uno a muchos
  gastos Gasto[]

  @@map("ConceptoGasto")
}

model Gasto {
  id                Int     @id @default(autoincrement())
  sucursal_id       Int
  tipo_gasto_id     Int
  concepto_gasto_id Int
  detalles          String  @map("detalles") @db.VarChar(250)
  monto             Float
  fecha             DateTime
  test              Boolean   @default(false)
  // Llaves foraneas
  sucursal      Sucursal      @relation(fields: [sucursal_id], references: [id])
  tipoGasto     TipoGasto     @relation(fields: [tipo_gasto_id], references: [id])
  conceptoGasto ConceptoGasto @relation(fields: [concepto_gasto_id], references: [id])

  @@map("Gasto")
}


model Ingreso {
  id                Int     @id @default(autoincrement())
  sucursal_id       Int
  detalles          String  @map("detalles") @db.VarChar(250)
  monto             Float
  fecha             DateTime

  // Llaves foraneas
  sucursal      Sucursal      @relation(fields: [sucursal_id], references: [id])

  @@map("Ingreso")
}



model Segmento {
  id                  Int     @id @default(autoincrement())
  sucursal_origen_id  Int
  sucursal_destino_id Int
  descripcion         String  @map("descripcion") @db.VarChar(250)
  distancia           Float
  test                Boolean   @default(false)

  // Llaves foraneas
  sucursal_origen   Sucursal  @relation("sucursal_origen", fields: [sucursal_origen_id], references: [id])
  sucursal_destino  Sucursal @relation("sucursal_destino", fields: [sucursal_destino_id], references: [id])

  // Relación uno a muchos
  salidas   Salida[]

  @@map("Segmento")
}

model TipoSalida {
  id        Int     @id @default(autoincrement())
  nombre    String  @map("nombre") @db.VarChar(100)
  estatico  Boolean @default(false)

  // Relación uno a muchos
  salidas Salida[]

  @@map("TipoSalida")
}

model Salida {
  id                    Int     @id @default(autoincrement())
  tipo_salida_id        Int
  vehiculo_id           Int
  segmento_id           Int
  fecha_salida          DateTime?
  fecha_llegada         DateTime?
  fecha_programada      DateTime
  comentario            String  @map("comentario") @db.VarChar(250)
  costo_lb              Float
  capacidad_lb          Float
  capacidad_reservada   Float
  capacidad_ocupada     Float
  test                  Boolean   @default(false)


  // Llaves foraneas
  tipoSalida TipoSalida @relation(fields: [tipo_salida_id], references: [id])
  vehiculo   Vehiculo   @relation(fields: [vehiculo_id], references: [id])
  segmento   Segmento   @relation(fields: [segmento_id], references: [id])

  // Relación uno a muchos
  trackings Tracking[]
  trackings_log TrackingLog[]

  @@map("Salida")
}

model EstadoPaquete {
  id          Int     @id @default(autoincrement())
  nombre      String  @map("nombre") @db.VarChar(100)
  descripcion String  @map("descripcion") @db.VarChar(250)
  estatico    Boolean @default(false)

  // Relación uno a muchos
  paquetes Paquete[]

  @@map("EstadoPaquete")
}

model EstadoTracking {
  id          Int     @id @default(autoincrement())
  nombre      String  @map("nombre") @db.VarChar(100)
  descripcion String  @map("descripcion") @db.VarChar(250)
  estatico    Boolean @default(false)

  // Relación uno a muchos
  trackings Tracking[]
  trackings_log TrackingLog[]

  @@map("EstadoTracking")
}

model Paquete {
  id                Int      @id @default(autoincrement())
  estado_paquete_id Int
  no_guia           String   @map("no_guia") @db.VarChar(20)
  descripcion       String   @map("descripcion") @db.VarChar(250)
  peso              Float
  volumen           Float
  remitente         String   @map("remitente") @db.VarChar(100)
  destinatario      String   @map("destinatario") @db.VarChar(100)
  costo             Float

  // Llaves foraneas
  estadoPaquete    EstadoPaquete @relation(fields: [estado_paquete_id], references: [id])
  
  // Relación uno a muchos
  trackings Tracking[]
  trackings_log TrackingLog[]

  @@map("Paquete")
}

model Tracking {
  id                  Int      @id @default(autoincrement())
  paquete_id          Int
  sucursal_id         Int
  estado_tracking_id  Int
  salida_id           Int
  actualizacion       DateTime?
  comentario          String   @map("comentario") @db.VarChar(250)

  // Llaves foraneas
  paquete             Paquete         @relation(fields: [paquete_id], references: [id])
  sucursal            Sucursal        @relation(fields: [sucursal_id], references: [id])
  estado_tracking     EstadoTracking  @relation(fields: [estado_tracking_id], references: [id])
  salida              Salida          @relation(fields: [salida_id], references: [id])

  @@map("Tracking")
}


model TrackingLog {
  id                  Int      @id @default(autoincrement())
  paquete_id          Int
  sucursal_id         Int
  estado_tracking_id  Int
  salida_id           Int
  actualizacion       DateTime?
  comentario          String   @map("comentario") @db.VarChar(250)

  // Llaves foraneas
  paquete             Paquete         @relation(fields: [paquete_id], references: [id])
  sucursal            Sucursal        @relation(fields: [sucursal_id], references: [id])
  estado_tracking     EstadoTracking  @relation(fields: [estado_tracking_id], references: [id])
  salida              Salida          @relation(fields: [salida_id], references: [id])

  @@map("TrackingLog")
}


